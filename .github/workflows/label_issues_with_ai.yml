name: AI Labeler for Issues (Gemini) # Workflow name, updated to indicate Gemini

on:
  issues:
    types: [opened, reopened, edited] # Triggers when an issue is opened, reopened, or edited

jobs:
  label_issue:
    runs-on: ubuntu-latest # The runner where the action will execute
    permissions:
      issues: write # Needs permissions to write (add labels) to issues
      contents: read # Needs permissions to read the issue content
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # Required for the action to access the repository

      - name: Set up Python # Sets up the Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Uses a recent Python version

      - name: Install dependencies # Installs necessary Python libraries
        run: pip install requests PyGithub # 'requests' for API calls, 'PyGithub' for GitHub interaction

      - name: Auto Label Issue with Gemini AI # Main step to label the issue with Gemini
        id: labeler # ID for this step
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }} # Issue title
          ISSUE_BODY: ${{ github.event.issue.body }} # Issue body
          AISTUDIO_API_KEY: ${{ secrets.AISTUDIO_API_KEY }} # Your Gemini API Key, stored as a secret
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub Token automatically provided by Actions
          # Define the labels Gemini can use here. Separate them by commas.
          # These are the actual label names that will be applied to GitHub issues.
          # IMPORTANT: Keep this list updated manually if your repository labels change.
          LABELS: "area/authentication 🔑,area/blog 📝,area/catalog,area/ci,area/cncf,area/community 🫶,area/dashboard 📊,area/demo 🕺,area/dependencies,area/development-mode 🧑‍💻,area/docker-compatibility 🐳,area/docker-desktop-extension 🐳🧩,area/documentation 📖,area/electron,area/extension/crc,area/extension/docker 🐳,area/extension/kind 🍾,area/extension/kube-context ☸,area/extension/kubectl-cli,area/extension/lima 🟢,area/extension/podman 🦭,area/extensions 🧩,area/extensions/compose 🎹,area/flatpak 📦,area/i18n,area/install 🎁,area/kubernetes ☸️,area/linter,area/model,area/onboarding,area/podify,area/podman-upstream 🦭,area/proxy,area/recommendations,area/registries,area/release,area/renderer 📈,area/settings ⚙️,area/statusbar 🚥,area/storybook,area/system-tray 📤,area/task-manager,area/telemetry 📈,area/terminal,area/tests 🚦,area/tooling 🛠️,area/ui 📈,area/ui-components,area/update,area/vpn,area/website 🌐,area/webview,dependencies,engine/podman 🦭,github_actions,Graphic Design,hacktoberfest,hacktoberfest-accepted,help wanted,javascript,kind/bug 🐞,kind/design-spec 📐,kind/enhancement ✨,kind/epic⚡,kind/feature 💡,kind/release 🎉,kind/task ☑️,kind/technical-debt 🔧,lifecycle/frozen,lifecycle/stale,os/linux 🐧,os/macOS 🍎,os/windows 🪟,qe/regression,qe/review,qe/test-case,qe/testing-required,status/need-triage,theme/compose,theme/container-management,theme/enterprise 🏢,theme/extensibility 🌉,theme/foundation 🧱,theme/install,theme/kubernetes,UX/UI Issue,👨‍👩‍👦 os/all"
        run: |
          # The Python script is now embedded using '<<EOF' and 'EOF' markers.
          # The closing 'EOF' MUST NOT BE INDENTED.
          python <<EOF
          import os
          import json
          import requests
          from github import Github

          # Get environment variables
          issue_title = os.environ.get('ISSUE_TITLE')
          issue_body = os.environ.get('ISSUE_BODY')
          gemini_api_key = os.environ.get('AISTUDIO_API_KEY')
          github_token = os.environ.get('GITHUB_TOKEN')
          labels_str = os.environ.get('LABELS')
          # labels_list contains only the actual label names for validation and application
          labels_list = [label.strip() for label in labels_str.split(',')]

          # Initialize GitHub API
          g = Github(github_token)
          repo = g.get_repo(os.environ.get('GITHUB_REPOSITORY'))
          issue_number = ${{ github.event.issue.number }}
          issue = repo.get_issue(number=issue_number)

          print(f'Processing Issue #{issue_number}: {issue_title}')
          print(f'Issue Body (first 200 chars): {issue_body[:200]}...')
          print(f'Available labels for classification: {labels_list}')

          # Prepare the prompt for Gemini
          # The prompt instructs Gemini to classify the issue and respond with an array of labels.
          # responseSchema is used to ensure the response is a JSON with an array of labels.
          prompt = f'''
          You are an expert GitHub issue classifier. Your task is to analyze the following GitHub issue and suggest ALL appropriate labels from the provided list.
          Respond with ONLY a JSON object containing an array of chosen labels under the key 'labels'. Do not include any other text, explanations, or punctuation. If no label is suitable, respond with {{\"labels\": []}}.

          Available labels: {', '.join(labels_list)}

          Issue Title: {issue_title}
          Issue Description: {issue_body}
          '''

          # Gemini API URL
          api_url = f'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={gemini_api_key}'
          headers = {'Content-Type': 'application/json'}
          payload = {
              'contents': [{'parts': [{'text': prompt}]}],
              'generationConfig': {
                  'temperature': 0.1, # A low temperature (0.1) is ideal for deterministic classification.
                  'responseMimeType': 'application/json', # Specifies that we expect a JSON response
                  'responseSchema': { # Defines the schema of the expected JSON
                      'type': 'OBJECT',
                      'properties': {
                          'labels': { # Changed key to 'labels' (plural)
                              'type': 'ARRAY',
                              'items': {'type': 'STRING'} # Expecting an array of strings
                          }
                      }
                  }
              }
          }

          print('Calling Gemini API...')
          labels_to_add = [] # List to store labels to be added to the issue
          triage_needed = False # Flag to determine if 'status/need-triage' should be added

          try:
              response = requests.post(api_url, headers=headers, data=json.dumps(payload))
              response.raise_for_status() # Raises an HTTPError for bad responses (4xx or 5xx)
              result = response.json()
              print(f'Gemini API response: {json.dumps(result, indent=2)}')

              predicted_labels_from_gemini = []
              # Parse Gemini's response to extract the list of labels
              if result and result.get('candidates') and len(result['candidates']) > 0 and \
                 result['candidates'][0].get('content') and result['candidates'][0]['content'].get('parts') and \
                 len(result['candidates'][0]['content']['parts']) > 0:
                  try:
                      # Due to responseSchema, the content should be a JSON string
                      parsed_content = json.loads(result['candidates'][0]['content']['parts'][0]['text'])
                      predicted_labels_from_gemini = parsed_content.get('labels', []) # Get the 'labels' array, default to empty list
                  except json.JSONDecodeError:
                      print('Error decoding JSON from Gemini response. Raw text:', result['candidates'][0]['content']['parts'][0]['text'])
                      triage_needed = True # If parsing fails, definitely needs triage
              else:
                  triage_needed = True # If no candidates or content, needs triage

              # Process predicted labels
              if predicted_labels_from_gemini:
                  found_valid_label = False
                  for label in predicted_labels_from_gemini:
                      label_stripped = label.strip()
                      if label_stripped and label_stripped.lower() != 'none' and label_stripped in labels_list:
                          labels_to_add.append(label_stripped)
                          print(f'Predicted and valid label: {label_stripped}')
                          found_valid_label = True
                      else:
                          print(f'Predicted label "{label_stripped}" is not in the allowed list or is "none".')
                  
                  if not found_valid_label:
                      triage_needed = True # If no valid labels were found among predictions
              else:
                  triage_needed = True # If Gemini returned an empty list

              # Add 'status/need-triage' if flagged
              if triage_needed and "status/need-triage" in labels_list:
                  labels_to_add.append("status/need-triage")
                  print("Adding 'status/need-triage' due to AI uncertainty or no valid prediction.")
              elif triage_needed:
                  print("Warning: 'status/need-triage' label not found in the provided LABELS list. Cannot add.")


              # Apply all collected labels
              if labels_to_add:
                  # Remove duplicates in case 'status/need-triage' was added multiple times or other duplicates
                  labels_to_add = list(set(labels_to_add))
                  for label_name in labels_to_add:
                      try:
                          issue.add_to_labels(label_name)
                          print(f'Label successfully added: {label_name} to issue #{issue_number}')
                      except Exception as e:
                          print(f'Error adding label {label_name}: {e}')
                          # If the label does not exist in the repository, try to create it
                          if "Resource not accessible by integration" in str(e) or "Not Found" in str(e):
                              print(f"Label '{label_name}' might not exist. Attempting to create it...")
                              try:
                                  repo.create_label(label_name, "FFFFFF") # Creates the label with a default color (white)
                                  issue.add_to_labels(label_name)
                                  print(f'Label successfully created and added: {label_name} to issue #{issue_number}')
                              except Exception as create_e:
                                  print(f"Could not create label '{label_name}': {create_e}")
                          else:
                              raise e # Re-raise the error if it's another type of problem
              else:
                  print('No labels were determined to be added to the issue.')

          except requests.exceptions.HTTPError as err:
              print(f'An HTTP error occurred: {err}')
              print(f'Response content: {response.text}')
          except Exception as e:
              print(f'An unexpected error occurred: {e}')
          EOF
